import java.util.*;
import java.io.*;
 
public class AdminManager {
    private Scanner in = new Scanner(System.in);

    public void meanFunction() throws IOException {
            System.out.println("\n1) Profile");
            System.out.println("2) Delete");
            System.out.println("3) Add slots");
            System.out.println("4) Display");
            System.out.println("5) Update");
            System.out.println("6) The total amount");
            System.out.println("7) Exit");
            System.out.print(" ==> ");
            int menuChoice = 0;
            try {
                menuChoice = Integer.parseInt(in.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("\t\t\t\t\t\tInvalid input. Please enter a number.");
            }

            switch (menuChoice) {
                case 1:
                    System.out.println("\t\t\t\t\t\tProfile selected.");
                    break;
                case 2:
                    System.out.println("\t\t\t\t\t\tDelete selected.");
                    deleteEntity();
                    break;
                case 3:
                     addSlot();
                    break;
                case 4:
                    System.out.println("\t\t\t\t\t\tDisplay selected.");
                    displayMenu();
                    break;
                case 5:
                    System.out.println("\t\t\t\t\t\tUpdate selected.");
                    break;
                case 6:
                    System.out.println("\t\t\t\t\t\tThe total amount selected.");
                    break;
                case 7:
                    System.out.println("\t\t\t\t\t\tExiting the program.\n\t\t\t\t\t\t\t\tGoodbye!");
                    return;
                default:
                    System.out.println("\t\t\t\t\t\tInvalid choice. Please try again.");
                    break;
            }
    }
    private void displayMenu() throws IOException {
        System.out.println("What do you want to display?");
        System.out.println("1) Owner");
        System.out.println("2) Slot");
        System.out.println("3) Spot");
        System.out.println("4) Vehicle");
        System.out.print(" ==> ");
        int displayChoice = Integer.parseInt(in.nextLine());

        switch (displayChoice) {
            case 1:
                System.out.println("\t\t\t\t\t\tDisplaying Owners...");
                OwnerManager owner = new OwnerManager();
                List<Owner> owners = owner.loadOwners(FilePaths.OWNERS_FILE_PATH);
                owner.displayOwners(owners);
                break;
            case 2:
                System.out.println("\t\t\t\t\t\tDisplaying Slots...\n");
                slotManager slot = new slotManager();
                List<Slot> slots = slot.loadSlots(FilePaths.SLOTS_FILE_PATH);
                slot.displaySlots(slots);
                break;
            case 3:
                System.out.println("\t\t\t\t\t\tDisplaying Spots...\n");
                spotManager spot = new spotManager();
                List<Spot> spots = spot.loadSpots(FilePaths.SPOTS_FILE_PATH);
                spot.displaySpots(spots);
                break;
            case 4:
                System.out.println("\t\t\t\t\t\tDisplaying Vehicles...");
                break;
            default:
                System.out.println("\t\t\t\t\t\tInvalid choice.");
                break;
        }
    }
    public void deleteEntity() throws IOException {
        System.out.println("What do you want to delete?");
        System.out.println("1) Owner");
        System.out.println("2) Slot");
        System.out.println("3) Spot");
        System.out.print(" ==> ");

        int deleteChoose = Integer.parseInt(in.nextLine());
        switch (deleteChoose) {
            case 1:
                System.out.println("\t\t\t\t\t\tWhich owner do you want to delete?");
                OwnerManager owner = new OwnerManager();
                List<Owner> owners = owner.loadOwners(FilePaths.OWNERS_FILE_PATH);
                owner.displayOwners(owners);
                deleteOne(owners);
                break;
            case 2:
                System.out.println("\t\t\t\t\t\tWhich slot do you want to delete?");
                slotManager slot = new slotManager();
                List<Slot> slots = slot.loadSlots(FilePaths.SLOTS_FILE_PATH);
                slot.displaySlots(slots);
                deleteOne(slots);
                break;
            case 3:
                System.out.println("\t\t\t\t\t\tWhich spot do you want to delete?");
                spotManager s = new spotManager();
                List<Spot> spots = s.loadSpots(FilePaths.SPOTS_FILE_PATH);
                s.displaySpots(spots);
                deleteOne(spots);
                //s.displaySpots(spots); it was just to make sure that the spot has been deleted from the list

                break;
            default:
                System.out.println("\t\t\t\t\t\tInvalid choice.");
                break;
        }
    }


     private void addSlot() throws IOException {
        System.out.println("\n--- Add a New Slot ---");

        // Prompt for slot details
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter Slot ID: ");
        int slotId = Integer.parseInt(scanner.nextLine());

        System.out.print("Enter Spot ID: ");
        int spotId = Integer.parseInt(scanner.nextLine());

        System.out.print("Enter Date (YYYY-MM-DD): ");
        LocalDate date = LocalDate.parse(scanner.nextLine());

        System.out.print("Enter Start Time (HH:MM): ");
        LocalTime startTime = LocalTime.parse(scanner.nextLine());

        System.out.print("Enter End Time (HH:MM): ");
        LocalTime endTime = LocalTime.parse(scanner.nextLine());

        System.out.print("Is Reserved? (true/false): ");
        boolean isReserved = Boolean.parseBoolean(scanner.nextLine());

        // Create a new slot object
        Slot newSlot = new Slot(slotId, spotId, date, startTime, endTime, isReserved);

        // Load existing slots from the file
        SlotManager slotManager = new SlotManager();
        List<Slot> slots = slotManager.loadSlots(FilePaths.SLOTS_FILE_PATH);

        // Add the new slot to the list
        slots.add(newSlot);
        System.out.println("Slot added successfully!");
    }

















    private <T> void deleteOne(List<T> entityList) {
        if (entityList.isEmpty()) {
            System.out.println("\t\t\t\t\t\tThe list is empty. Nothing to delete.");
            return;
        }

        // Display items in the list
        int userChoice;
        try {
            userChoice = Integer.parseInt(in.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("\t\t\t\t\t\tInvalid input.");
            return;
        }

        if (userChoice > 0 && userChoice <= entityList.size()) {
            // Remove the selected item from the list
            entityList.remove(userChoice - 1);
            System.out.println("\t\t\t\t\t\tItem deleted successfully.");

        } else {
            System.out.println("\t\t\t\t\t\tInvalid choice.");
        }
    }
}
